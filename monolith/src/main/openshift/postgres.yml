parameters:
  - name: METADATA_LABELS_APPLICATION
    value: openshift-test
  - name: METADATA_LABELS_TEMPLATE
    value: openshift-test-template
  - name: DATABASE_SERVICE_NAME
    description: Database service name
    value: postgres
  - name: POSTGRESQL_VOLUME_CAPACITY
    displayName: Volume Capacity
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    value: 1G
  - name: POSTGRESQL_DATABASE_NAME
    value: testuser
  - name: POSTGRESQL_IMAGE
    displayName: PostgreSQL image
    description: The PostgreSQL image name / Container image to be used.
    value: postgres:11.9
  - name: PSQL_USERNAME
    value: testuser
  - name: PSQL_PASSWORD
    description: Password for the database user
    generate: expression
    from: "[a-zA-Z0-9]{16}"
  - name: CPU_REQUEST_POSTGRES
    description: CPU resource requests for postgres database
    value: 100m
  - name: CPU_LIMIT_POSTGRES
    description: CPU resource limit for postgres database
    value: 200m
  - name: MEMORY_REQUEST_POSTGRES
    description: Memory resource request for postgres database
    value: 600Mi
  - name: MEMORY_LIMIT_POSTGRES
    description: Memory resource limit for postgres database
    value: 1Gi
  - name: TIMEZONE
    value: Europe/Zurich

kind: Template
apiVersion: v1
metadata:
  name: openshift-test-template
  annotations:
    iconClass: icon-java
    tags: java,microservice
objects:

  - apiVersion: v1
    kind: Secret
    metadata:
      labels:
        application: ${METADATA_LABELS_APPLICATION}
        template: ${METADATA_LABELS_TEMPLATE}
      name: postgres-credentials
    type: Opaque
    stringData:
      username: ${PSQL_USERNAME}
      password: ${PSQL_PASSWORD}

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        application: ${METADATA_LABELS_APPLICATION}
        template: ${METADATA_LABELS_TEMPLATE}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      lookupPolicy:
        local: false
      tags:
        - from:
            kind: DockerImage
            name: ${POSTGRESQL_IMAGE}
          name: ${DATABASE_SERVICE_NAME}

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        application: ${METADATA_LABELS_APPLICATION}
        template: ${METADATA_LABELS_TEMPLATE}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${POSTGRESQL_VOLUME_CAPACITY}

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: ${METADATA_LABELS_APPLICATION}
        template: ${METADATA_LABELS_TEMPLATE}
      name: ${DATABASE_SERVICE_NAME}
    spec:
      replicas: 1
      selector:
        name: ${DATABASE_SERVICE_NAME}
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: ${DATABASE_SERVICE_NAME}
        spec:
          containers:
            - name: ${DATABASE_SERVICE_NAME}
              env:
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: username
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: password
                - name: POSTGRES_DB
                  value: ${POSTGRESQL_DATABASE_NAME}
                - name: PGCTLTIMEOUT
                  value: "300"
                - name: TZ
                  value: ${TIMEZONE}
                - name: PGDATA
                  value: /var/lib/postgresql/data/testuser
              image: ${POSTGRESQL_IMAGE}
              imagePullPolicy: IfNotPresent
              livenessProbe:
                initialDelaySeconds: 300
                tcpSocket:
                  port: 5432
                timeoutSeconds: 1
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -i
                    - -c
                    - psql -h 127.0.0.1 -U $POSTGRES_USER -q -d $POSTGRES_DB -c 'SELECT 1'
                initialDelaySeconds: 5
                timeoutSeconds: 1
              resources:
                limits:
                  cpu: ${CPU_LIMIT_POSTGRES}
                  memory: ${MEMORY_LIMIT_POSTGRES}
                requests:
                  cpu: ${CPU_REQUEST_POSTGRES}
                  memory: ${MEMORY_REQUEST_POSTGRES}
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                - mountPath: /var/lib/postgresql/data
                  name: ${DATABASE_SERVICE_NAME}-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: ${DATABASE_SERVICE_NAME}-data
              persistentVolumeClaim:
                claimName: ${DATABASE_SERVICE_NAME}
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${DATABASE_SERVICE_NAME}
            from:
              kind: ImageStreamTag
              name: postgres:11.9
          type: ImageChange
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        application: ${METADATA_LABELS_APPLICATION}
        template: ${METADATA_LABELS_TEMPLATE}
        monitoring: postgresql
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
        - name: postgresql
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        name: ${DATABASE_SERVICE_NAME}
      sessionAffinity: None
      type: ClusterIP